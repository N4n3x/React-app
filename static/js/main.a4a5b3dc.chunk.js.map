{"version":3,"sources":["logo.svg","components/todoForm.js","components/todoList.js","components/todo.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoForm","evt","preventDefault","txt","this","todoTitle","value","props","onNewTodo","title","done","createAt","Date","Grid","container","spacing","justify","item","xs","TextField","fullWidth","label","inputRef","input","Button","color","variant","onClick","bind","Component","TodoList","className","showTodos","todos","todo","index","onTodoToggle","map","idx","ListItem","button","key","toggleTodo","ListItemIcon","ListItemText","primary","secondary","toLocaleDateString","toLocaleTimeString","Todo","state","newTodoList","push","setState","console","log","_todo","newTodos","Box","List","onToggleTodo","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,0PC4B5BC,E,sKAxBHC,GACJA,EAAIC,iBACJ,IAAMC,EAAMC,KAAKC,UAAUC,MAC3BF,KAAKC,UAAUC,MAAQ,GACvBF,KAAKG,MAAMC,UAAU,CACjBC,MAAON,EACPO,MAAM,EACNC,SAAU,IAAIC,S,+BAGZ,IAAD,OACL,OACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,UAChC,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CAAWC,WAAS,EAACC,MAAM,OAAQC,SAAU,SAACC,GAAD,OAAS,EAAKlB,UAAYkB,MAE3E,kBAACV,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACX,kBAACM,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,QAASvB,KAAKuB,QAAQC,KAAKxB,OAAvE,iB,GAlBGyB,a,6DCmCRC,E,uKA7BP,OACE,yBAAKC,UAAW,QACX3B,KAAK4B,UAAU5B,KAAKG,MAAM0B,U,iCAK1BC,EAAMC,GAEb/B,KAAKG,MAAM6B,aAAaF,EAAMC,K,gCAGxBF,GAAO,IAAD,OACZ,OACIA,EAAMI,KAAI,SAACH,EAAMI,GACb,OACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACT,UAAW,OAAQU,IAAKH,EAAKX,QAAS,kBAAI,EAAKe,WAAWR,EAAMI,KAC7E,kBAACK,EAAA,EAAD,KACKT,EAAKxB,KAAO,kBAAC,IAAD,MAA0B,kBAAC,IAAD,OAE3C,kBAACkC,EAAA,EAAD,CAAcC,QAASX,EAAKzB,MAAOqC,UAAWZ,EAAKvB,SAASoC,qBAAuB,IAAMb,EAAKvB,SAASqC,+B,GAvBxGnB,a,iBCuCRoB,E,kDAvCX,WAAY1C,GAAQ,IAAD,8BACf,cAAMA,IACD2C,MAAQ,CACTjB,MAAO,IAHI,E,sDAMTC,GAEN,IAAIiB,EAAc/C,KAAK8C,MAAMjB,MAC7BkB,EAAYC,KAAKlB,GACjB9B,KAAKiD,SAAS,CAACpB,MAAOkB,M,mCAGbjB,EAAMC,GACfmB,QAAQC,IAAIpB,EAAO,MAAOD,GAC1B,IAAIsB,EAAQtB,EACZsB,EAAM9C,MAAQwB,EAAKxB,KACnB,IAAI+C,EAAWrD,KAAK8C,MAAMjB,MAC1BwB,EAAStB,GAASqB,EAClBpD,KAAKiD,SAAS,CAACpB,MAAOwB,M,+BAItB,OACI,kBAACC,EAAA,EAAD,CAAK3B,UAAW,QACZ,yBAAKA,UAAU,eACX,wCAEJ,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAUvB,UAAWJ,KAAKI,UAAUoB,KAAKxB,QACzC,kBAACuD,EAAA,EAAD,KACI,kBAAC,EAAD,CAAU1B,MAAO7B,KAAK8C,MAAMjB,MAAOG,aAAchC,KAAKwD,aAAahC,KAAKxB,e,GAhC7EyB,aCkBJgC,MAff,WACI,OACI,yBAAK9B,UAAU,OACX,4BAAQA,UAAU,cAGd,yBAAK+B,IAAKC,IAAMhC,UAAU,WAAWiC,IAAI,UAE7C,yBAAKjC,UAAW,YACZ,kBAAC,EAAD,SCLIkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.a4a5b3dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\r\nimport {Button, Grid, TextField} from '@material-ui/core';\r\n\r\nclass TodoForm extends Component{\r\n    onClick(evt){\r\n        evt.preventDefault();\r\n        const txt = this.todoTitle.value;\r\n        this.todoTitle.value = \"\";\r\n        this.props.onNewTodo({\r\n            title: txt,\r\n            done: false,\r\n            createAt: new Date()\r\n        });\r\n    }\r\n    render() {\r\n        return(\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item xs={9}>\r\n                    <TextField fullWidth label=\"TODO\"  inputRef={(input)=>this.todoTitle = input}/>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                    <Button color=\"primary\" variant=\"contained\" onClick={this.onClick.bind(this)}>Ajouter</Button>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoForm;","import React, {Component} from \"react\";\r\nimport { ListItem, ListItemText, ListItemIcon} from \"@material-ui/core\";\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\n\r\n\r\nclass TodoList extends Component{\r\n\r\n    render(){\r\n        return(\r\n          <div className={'list'}>\r\n              {this.showTodos(this.props.todos)}\r\n          </div>\r\n        );\r\n    }\r\n\r\n    toggleTodo(todo, index){\r\n        // e.preventDefault()\r\n        this.props.onTodoToggle(todo, index);\r\n    }\r\n\r\n    showTodos(todos){\r\n        return(\r\n            todos.map((todo, idx) => {\r\n                return(\r\n                    <ListItem button className={\"todo\"} key={idx} onClick={()=>this.toggleTodo(todo, idx)}>\r\n                        <ListItemIcon>\r\n                            {todo.done ? <CheckIcon></CheckIcon> : <RadioButtonUncheckedIcon></RadioButtonUncheckedIcon>}\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={todo.title} secondary={todo.createAt.toLocaleDateString() + \" \" + todo.createAt.toLocaleTimeString()}>\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                )\r\n            })\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React, {Component} from 'react';\r\nimport TodoForm from \"./todoForm\";\r\nimport TodoList from \"./todoList\";\r\nimport {Box, List} from \"@material-ui/core\";\r\n\r\nclass Todo extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        }\r\n    }\r\n    onNewTodo(todo){\r\n        // console.log(todo);\r\n        let newTodoList = this.state.todos;\r\n        newTodoList.push(todo);\r\n        this.setState({todos: newTodoList})\r\n    }\r\n\r\n    onToggleTodo(todo, index){\r\n        console.log(index, \" : \", todo);\r\n        let _todo = todo;\r\n        _todo.done = !todo.done;\r\n        let newTodos = this.state.todos;\r\n        newTodos[index] = _todo;\r\n        this.setState({todos: newTodos});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Box className={\"Todo\"}>\r\n                <div className='Todo-header'>\r\n                    <h2>TodoApp</h2>\r\n                </div>\r\n                <div className='Todo-body'>\r\n                    <TodoForm onNewTodo={this.onNewTodo.bind(this)}></TodoForm>\r\n                    <List>\r\n                        <TodoList todos={this.state.todos} onTodoToggle={this.onToggleTodo.bind(this)}></TodoList>\r\n                    </List>\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;","import React from 'react';\nimport 'typeface-roboto';\nimport logo from '../logo.svg';\nimport '../style/App.css';\nimport Todo from \"./todo\";\n// import MainBar from \"./MainBar\";\n// import MainDrawer from \"./MainDrawer\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {/*<MainBar></MainBar>*/}\n                {/*<MainDrawer></MainDrawer>*/}\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            </header>\n            <div className={\"App-body\"}>\n                <Todo/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}