{"version":3,"sources":["logo.svg","components/TodoFormHook.js","components/TodoListHook.js","components/TodoHook.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoFormHook","props","useState","input","setInput","Grid","container","spacing","justify","item","xs","TextField","fullWidth","label","value","onInput","event","target","Button","color","variant","onClick","e","preventDefault","console","log","txt","onNewTodo","id","title","done","createAt","Date","TodoListHook","className","todo","map","idx","ListItem","button","key","index","onTodoToggle","toggleTodo","ListItemIcon","ListItemText","primary","secondary","toLocaleDateString","toLocaleTimeString","TodoHook","todoList","setTodoList","Box","length","List","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,kPCgC5BC,MA7Bf,SAAsBC,GAAQ,IAAD,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,KAiBzB,OACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,UAChC,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CAAWC,WAAS,EAACC,MAAM,OAAQC,MAAOX,EAAOY,QAAS,SAAAC,GAAUZ,EAASY,EAAMC,OAAOH,WAE9F,kBAACT,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACX,kBAACQ,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,QArBxC,SAAAC,GAGZ,GAFAA,EAAEC,iBACFC,QAAQC,IAAItB,GACC,KAAVA,EAAa,CACZ,IAAMuB,EAAMvB,EACZC,EAAS,IACTH,EAAM0B,UAAU,CACZC,GAAI,EACJC,MAAOH,EACPI,MAAM,EACNC,SAAU,IAAIC,UAWd,c,+ECQDC,MA7Bf,SAAsBhC,GAsBlB,OACI,yBAAKiC,UAAW,QACFjC,EAAMkC,KAhBPC,KAAI,SAACD,EAAME,GAChB,OACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACL,UAAW,OAAQM,IAAKH,EAAKhB,QAAS,kBARpD,SAACc,EAAMM,GACtBxC,EAAMyC,aAAaP,EAAKM,GAO+CE,CAAWR,EAAME,KACxE,kBAACO,EAAA,EAAD,KACKT,EAAKL,KAAO,kBAAC,IAAD,MAAe,kBAAC,IAAD,OAEhC,kBAACe,EAAA,EAAD,CAAcC,QAASX,EAAKN,MAAOkB,UAAWZ,EAAKJ,SAASiB,qBAAuB,IAAMb,EAAKJ,SAASkB,6BCehHC,MA7Bf,WAAqB,IAAD,EAEgBhD,mBAAS,IAFzB,mBAETiD,EAFS,KAECC,EAFD,KAchB,OACI,kBAACC,EAAA,EAAD,CAAKnB,UAAW,QACZ,yBAAKA,UAAU,eACX,wCAEJ,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAUP,UAhBJ,SAAAQ,GACdA,EAAKP,GAAKuB,EAASG,OACnBF,EAAY,GAAD,mBAAKD,GAAL,CAAehB,KAC1BX,QAAQC,IAAI0B,MAcJ,kBAACI,EAAA,EAAD,KACI,kBAAC,EAAD,CAAUpB,KAAMgB,EAAUT,aAZrB,SAACP,GAClBiB,EAAYD,EAASf,KAAI,SAAA3B,GAAI,OAAIA,EAAKmB,KAAOO,EAAKP,GAAjB,2BAA0BnB,GAA1B,IAAgCqB,MAAOK,EAAKL,OAAQrB,aCO9E+C,MAff,WACI,OACI,yBAAKtB,UAAU,OACX,4BAAQA,UAAU,cAGd,yBAAKuB,IAAKC,IAAMxB,UAAU,WAAWyB,IAAI,UAE7C,yBAAKzB,UAAW,YACZ,kBAAC,EAAD,SCLI0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.a36d8f69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react';\r\nimport {Button, Grid, TextField} from \"@material-ui/core\";\r\n\r\nfunction TodoFormHook(props) {\r\n    const [input, setInput] = useState('')\r\n    const onClick = e => {\r\n        e.preventDefault();\r\n        console.log(input);\r\n        if(input !== \"\"){\r\n            const txt = input;\r\n            setInput(\"\");\r\n            props.onNewTodo({\r\n                id: 0,\r\n                title: txt,\r\n                done: false,\r\n                createAt: new Date()\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={3} justify=\"center\">\r\n            <Grid item xs={9}>\r\n                <TextField fullWidth label=\"TODO\"  value={input} onInput={event => {setInput(event.target.value)}}/>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n                <Button color=\"primary\" variant=\"contained\" onClick={onClick}>Ajouter</Button>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default TodoFormHook;","import React from 'react';\r\nimport {ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\r\n\r\nfunction TodoListHook(props) {\r\n\r\n    const toggleTodo = (todo, index) => {\r\n        props.onTodoToggle(todo,index);\r\n    }\r\n\r\n    const showTodo = someTodo =>{\r\n        return(\r\n            someTodo.map((todo, idx) =>{\r\n                return(\r\n                    <ListItem button className={\"todo\"} key={idx} onClick={()=>toggleTodo(todo, idx)}>\r\n                        <ListItemIcon>\r\n                            {todo.done ? <CheckIcon/> : <RadioButtonUncheckedIcon/>}\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={todo.title} secondary={todo.createAt.toLocaleDateString() + \" \" + todo.createAt.toLocaleTimeString()}>\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                );\r\n            })\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={'list'}>\r\n            {showTodo(props.todo)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListHook;","import React, {useState} from 'react';\r\nimport TodoForm from \"./TodoFormHook\";\r\nimport {Box, List} from \"@material-ui/core\";\r\nimport TodoList from \"./TodoListHook\";\r\n\r\nfunction TodoHook() {\r\n\r\n    const [todoList, setTodoList] = useState([]);\r\n\r\n    const onNewTodo = todo => {\r\n        todo.id = todoList.length;\r\n        setTodoList([...todoList, todo]);\r\n        console.log(todoList);\r\n    }\r\n\r\n    const onToggleTodo = (todo) => {\r\n        setTodoList(todoList.map(item => item.id === todo.id ? {...item, done: !todo.done} : item));\r\n    }\r\n\r\n    return (\r\n        <Box className={\"Todo\"}>\r\n            <div className='Todo-header'>\r\n                <h2>TodoApp</h2>\r\n            </div>\r\n            <div className='Todo-body'>\r\n                <TodoForm onNewTodo={onNewTodo}/>\r\n                <List>\r\n                    <TodoList todo={todoList} onTodoToggle={onToggleTodo}/>\r\n                </List>\r\n            </div>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default TodoHook;","import React from 'react';\nimport 'typeface-roboto';\nimport logo from '../logo.svg';\nimport '../style/App.css';\nimport Todo from \"./TodoHook\";\n// import MainBar from \"./MainBar\";\n// import MainDrawer from \"./MainDrawer\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {/*<MainBar></MainBar>*/}\n                {/*<MainDrawer></MainDrawer>*/}\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            </header>\n            <div className={\"App-body\"}>\n                <Todo/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}